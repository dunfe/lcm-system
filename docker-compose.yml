version: "2"

services:
  nginx:
    image: nginx:1.19.8-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - admin-build:/usr/share/nginx/admin/html
      - client-build:/usr/share/nginx/client/html
      - landing-build:/usr/share/nginx/landing/html
      - mentor-build:/usr/share/nginx/mentor/html
    links:
      - api
    networks:
      - webappnetwork
  certbot:
    image: certbot/dns-cloudflare
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - ./data/certbot/cloudflareapi.ini:/var/www/cloudflareapi.ini
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  api:
    build:
      context: .
      dockerfile: ./packages/api/Dockerfile
    restart: always
    ports:
      - "3000:3000"
    networks:
      - webappnetwork
  client:
    build:
      context: .
      dockerfile: ./packages/client/Dockerfile
    restart: always
    volumes:
      - "./.:/client"
      - client-build:/client/packages/client/build
    ports:
      - "5000:80"
    networks:
      - webappnetwork
  admin:
    build:
      context: .
      dockerfile: ./packages/admin/Dockerfile
    restart: always
    volumes:
      - "./.:/admin"
      - admin-build:/admin/packages/admin/build
    ports:
      - "5001:80"
    networks:
      - webappnetwork
  landing:
    build:
      context: .
      dockerfile: ./packages/landing/Dockerfile
    restart: always
    volumes:
      - "./.:/landing"
      - landing-build:/landing/packages/landing/dist
    ports:
      - "5002:80"
    networks:
      - webappnetwork
  mentor:
    build:
      context: .
      dockerfile: ./packages/mentor/Dockerfile
    restart: always
    volumes:
      - "./.:/mentor"
      - mentor-build:/mentor/packages/mentor/build
    ports:
      - "5003:80"
    networks:
      - webappnetwork
  dem:
    image: quaide/dem:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - conf.yml:/app/conf.yml
networks:
  webappnetwork:
    driver: bridge
volumes:
  client-build:
  admin-build:
  landing-build:
  mentor-build:
